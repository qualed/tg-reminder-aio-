import os
import asyncio
import logging
from datetime import datetime, timedelta, timezone
from dateutil import parser
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
#from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
#from pytz import timezone
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import database as db

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á –∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
# tasks = {}
# task_id = 0
# users_tz = {}
#moscow_tz = timezone('Europe/Moscow')

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class TaskStates(StatesGroup):
    waiting_for_task = State()
    waiting_for_tz = State()
    waiting_for_del = State()

@dp.message(Command("start"))
async def start(message: Message):
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    builder.button(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
    builder.button(text="üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
    keyboard = builder.as_markup(resize_keyboard=True)

    await message.answer('–ü—Ä–∏–≤–µ—Ç. –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. '
                         '–ù–∞–∂–º–∏ "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"',
                         reply_markup=keyboard)

async def prompt_for_timezone(message: Message, state: FSMContext):
    await message.answer("–î–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É —Å –ú–°–ö:\n"
                             "<code>–ú–°–ö+3</code>", 
                         parse_mode="HTML",
                         reply_markup=types.ReplyKeyboardRemove()) 
    await state.set_state(TaskStates.waiting_for_tz)

@dp.message(F.text == "üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
async def btn_add_tz(message: Message, state: FSMContext):
    await state.clear()
    await prompt_for_timezone(message, state)

@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def ask_for_task(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_tz_offset = await db.get_user_timezone_offset(user_id)
    if user_tz_offset is not None:
        await message.answer("–í–≤–µ–¥–∏—Ç–∏ –∑–∞–¥–∞—á—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                             "<code>–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É 17.05.25 14:00</code>", parse_mode="HTML")
        await state.set_state(TaskStates.waiting_for_task)
    else:
        await prompt_for_timezone(message, state)


@dp.message(Command("addtask"))
async def comand_addtask(message: Message, state: FSMContext):
    await add_task(message, state)
    
@dp.message(TaskStates.waiting_for_task)
async def btn_addtask(message: Message, state: FSMContext):
    await add_task(message, state)

# –ü—Ä–∏–∫–æ–ª—å–Ω–∞—è —Ñ–∏—à–∫–∞, –Ω–æ –≤—Ä—è–¥ –ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ. –µ—Å–ª–∏ await state.set_state(...) –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π,
#   –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç:
# @dp.message()
# async def catch_any_message(message: Message, state: FSMContext):
#     current_state = await state.get_state()
#     if current_state == TaskStates.waiting_for_task:
#         await btn_addtask(message, state)  
#     else:
#         await message.answer("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã!")
    
@dp.message(TaskStates.waiting_for_tz)
async def add_tz(message: Message, state: FSMContext):
    try:
        tz_str = message.text.split()[-1].upper()
        offset = int(tz_str.replace("–ú–°–ö", "").replace("+", ""))
        users_tz[message.from_user.id] = offset
        await message.answer("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")  
        await message.answer("–í–≤–µ–¥–∏—Ç–∏ –∑–∞–¥–∞—á—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                             "<code>–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É 17.05.25 14:00</code>", parse_mode="HTML")
        await state.set_state(TaskStates.waiting_for_task)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ú–°–ö+3, –ú–°–ö0, –ú–°–ö-1")  

async def add_task(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_tz_offset = await db.get_user_timezone_offset(user_id)

    if user_tz_offset is None: 
        await message.answer('–û—à–∏–±–∫–∞: –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å"')
        await state.clear()
        return

    try:
        task_str = message.text.split()
        if task_str[0] == "/addtask":
            task_str = task_str[1:]
        if len(task_str) < 3:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")

        date_str = task_str[-2].replace("/", ".").replace("-", ".")
        time_str = task_str[-1].replace(".", ":")
        desc = " ".join(task_str[:-2])

        date_str_parts = date_str.split(".")
        if len(date_str_parts) == 2:
            date_str += f".{datetime.now().year}"
        elif len(date_str_parts) != 3:
             raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")  
          
        usertime_p = parser.parse(f"{date_str} {time_str}", dayfirst=True)
        offset = users_tz[user_id]
        #datetime_p = usertime_p.astimezone(moscow_tz) - timedelta(hours=offset)
        datetime_p = usertime_p - timedelta(hours=offset) + timedelta(hours=1)
        
        tasks.setdefault(user_id, {})[task_id] = {
            'desc': desc,
            'datetime': usertime_p
        }
        
        scheduler.add_job(remind, "date", run_date=datetime_p, args=[task_id, user_id])
        await message.answer(f"–ó–∞–¥–∞—á–∞ ID[{task_id}] —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        task_id += 1
        await state.clear()

    except ValueError as e:
        logging.warning(f"Failed to parse task input '{message.text}': {e}")
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n"
                             "<code>–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω 20.07.25 19:00</code>", parse_mode="HTML")  
    except Exception as e:
         logging.error(f"Error processing task input: {e}", exc_info=True)
         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
         await state.clear()

async def remind(task_id: int, user_id: int):
    task = tasks.get(user_id, {}).get(task_id)
    if task:
        await bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task['desc']}")
        del tasks[user_id][task_id]

@dp.message(F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def my_tasks(message: Message):
    user_id = message.from_user.id
    if user_id in tasks and tasks[user_id]:
        all_tasks_str = "\n".join(
            [f"{task_data['desc']} {task_data['datetime'].strftime('%d.%m.%Y %H:%M')} ID[{task_id}]"
             for task_id, task_data in tasks[user_id].items()]
        )
        await message.answer(f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{all_tasks_str}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
async def ask_for_del(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskStates.waiting_for_del)

@dp.message(TaskStates.waiting_for_del)
async def del_task(message: Message, state: FSMContext):
    try:
        task_id = int(message.text)
        user_tasks = tasks.get(message.from_user.id, {})
        if task_id in user_tasks:
            del user_tasks[task_id]
            await message.answer(f"–ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞")
            await state.clear()
        else:
            await message.answer("–¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ—Ç")
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏")

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio #—Ç—É—Ç, —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –ø–∞–º—è—Ç—å –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–∞–∫ –º–æ–¥—É–ª—å –≤ –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–ø—Ç. –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    asyncio.run(main())